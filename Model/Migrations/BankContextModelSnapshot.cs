// <auto-generated />
using System;
using Bank.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bank.DAL.Migrations
{
    [DbContext(typeof(BankContext))]
    partial class BankContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bank.DAL.Accounts.LegalPersonAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<byte>("Currency")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(9,3)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("LegalPersonAccounts");
                });

            modelBuilder.Entity("Bank.DAL.Accounts.LegalPersonCredit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<byte>("Currency")
                        .HasColumnType("tinyint");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(9,3)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("LegalPersonCredits");
                });

            modelBuilder.Entity("Bank.DAL.Accounts.LegalPersonDeposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<byte>("Currency")
                        .HasColumnType("tinyint");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(9,3)");

                    b.Property<bool>("WithCapitalization")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("LegalPersonDeposits");
                });

            modelBuilder.Entity("Bank.DAL.Accounts.PhysicalPersonAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<byte>("Currency")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(9,3)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("PhysicalPersonAccounts");
                });

            modelBuilder.Entity("Bank.DAL.Accounts.PhysicalPersonCredit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<byte>("Currency")
                        .HasColumnType("tinyint");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(9,3)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("PhysicalPersonCredits");
                });

            modelBuilder.Entity("Bank.DAL.Accounts.PhysicalPersonDeposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<byte>("Currency")
                        .HasColumnType("tinyint");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(9,3)");

                    b.Property<bool>("WithCapitalization")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("PhysicalPersonDeposits");
                });

            modelBuilder.Entity("Bank.DAL.Clients.LegalPersonClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("LegalPersonClients");
                });

            modelBuilder.Entity("Bank.DAL.Clients.PhysicalPersonClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("PhysicalPersonClients");
                });

            modelBuilder.Entity("Bank.DAL.OperationsArchive.LegalPersonAccountArchive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LegalPersonAccountId")
                        .HasColumnType("int");

                    b.Property<byte>("Operation")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("LegalPersonAccountId");

                    b.ToTable("LegalPersonAccountArchives");
                });

            modelBuilder.Entity("Bank.DAL.OperationsArchive.LegalPersonCreditArchive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LegalPersonCreditId")
                        .HasColumnType("int");

                    b.Property<byte>("Operation")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("LegalPersonCreditId");

                    b.ToTable("LegalPersonCreditArchives");
                });

            modelBuilder.Entity("Bank.DAL.OperationsArchive.LegalPersonDepositArchive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LegalPersonDepositId")
                        .HasColumnType("int");

                    b.Property<byte>("Operation")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("LegalPersonDepositId");

                    b.ToTable("LegalPersonDepositArchives");
                });

            modelBuilder.Entity("Bank.DAL.OperationsArchive.PhysicalPersonAccountArchive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte>("Operation")
                        .HasColumnType("tinyint");

                    b.Property<int>("PhysicalPersonAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhysicalPersonAccountId");

                    b.ToTable("PhysicalPersonAccountArchives");
                });

            modelBuilder.Entity("Bank.DAL.OperationsArchive.PhysicalPersonCreditArchive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte>("Operation")
                        .HasColumnType("tinyint");

                    b.Property<int>("PhysicalPersonCreditId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhysicalPersonCreditId");

                    b.ToTable("PhysicalPersonCreditArchive");
                });

            modelBuilder.Entity("Bank.DAL.OperationsArchive.PhysicalPersonDepositArchive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte>("Operation")
                        .HasColumnType("tinyint");

                    b.Property<int>("PhysicalPersonDepositId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhysicalPersonDepositId");

                    b.ToTable("PhysicalPersonDepositArchives");
                });

            modelBuilder.Entity("Bank.DAL.Accounts.LegalPersonAccount", b =>
                {
                    b.HasOne("Bank.DAL.Clients.LegalPersonClient", "Client")
                        .WithMany("Accounts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Bank.DAL.Accounts.LegalPersonCredit", b =>
                {
                    b.HasOne("Bank.DAL.Clients.LegalPersonClient", "Client")
                        .WithMany("Credits")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Bank.DAL.Accounts.LegalPersonDeposit", b =>
                {
                    b.HasOne("Bank.DAL.Clients.LegalPersonClient", "Client")
                        .WithMany("Deposits")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Bank.DAL.Accounts.PhysicalPersonAccount", b =>
                {
                    b.HasOne("Bank.DAL.Clients.PhysicalPersonClient", "Client")
                        .WithMany("Accounts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Bank.DAL.Accounts.PhysicalPersonCredit", b =>
                {
                    b.HasOne("Bank.DAL.Clients.PhysicalPersonClient", "Client")
                        .WithMany("Credits")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Bank.DAL.Accounts.PhysicalPersonDeposit", b =>
                {
                    b.HasOne("Bank.DAL.Clients.PhysicalPersonClient", "Client")
                        .WithMany("Deposits")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Bank.DAL.OperationsArchive.LegalPersonAccountArchive", b =>
                {
                    b.HasOne("Bank.DAL.Accounts.LegalPersonAccount", "Account")
                        .WithMany()
                        .HasForeignKey("LegalPersonAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Bank.DAL.OperationsArchive.LegalPersonCreditArchive", b =>
                {
                    b.HasOne("Bank.DAL.Accounts.LegalPersonCredit", "Credit")
                        .WithMany()
                        .HasForeignKey("LegalPersonCreditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Credit");
                });

            modelBuilder.Entity("Bank.DAL.OperationsArchive.LegalPersonDepositArchive", b =>
                {
                    b.HasOne("Bank.DAL.Accounts.LegalPersonDeposit", "Deposit")
                        .WithMany()
                        .HasForeignKey("LegalPersonDepositId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deposit");
                });

            modelBuilder.Entity("Bank.DAL.OperationsArchive.PhysicalPersonAccountArchive", b =>
                {
                    b.HasOne("Bank.DAL.Accounts.PhysicalPersonAccount", "Account")
                        .WithMany()
                        .HasForeignKey("PhysicalPersonAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Bank.DAL.OperationsArchive.PhysicalPersonCreditArchive", b =>
                {
                    b.HasOne("Bank.DAL.Accounts.PhysicalPersonCredit", "Credit")
                        .WithMany()
                        .HasForeignKey("PhysicalPersonCreditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Credit");
                });

            modelBuilder.Entity("Bank.DAL.OperationsArchive.PhysicalPersonDepositArchive", b =>
                {
                    b.HasOne("Bank.DAL.Accounts.PhysicalPersonDeposit", "Deposit")
                        .WithMany()
                        .HasForeignKey("PhysicalPersonDepositId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deposit");
                });

            modelBuilder.Entity("Bank.DAL.Clients.LegalPersonClient", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Credits");

                    b.Navigation("Deposits");
                });

            modelBuilder.Entity("Bank.DAL.Clients.PhysicalPersonClient", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Credits");

                    b.Navigation("Deposits");
                });
#pragma warning restore 612, 618
        }
    }
}
